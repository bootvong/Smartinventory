<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAQAAAA4AAAAwAAAATQAA
        AEUAAAAkAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAMN2aFbkNp
        g9ULMFvpBhowmwAAAFMAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACjVj
        gGQXY5z5F2Se/wsTKP8LEyj8BhkulQAAAD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkxXHdYF2Kc9xd9v/8psuf/ceX2/y5rlv8LEyj5AAAALgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAJL1hyUhdim/UXfb//OcLu/5T3//85wu7/WLzu/6PH1KoAAAATAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAACixSak0WYZrxF32//0fQ9P+U9///R9D0/1i87v+nzNm0AAAAFgAAAAQAAAAAAAAAAAAA
        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
        /5n///+B////a/f392Ds7Oxe8vLyYvT09HDw8PCJ5+fnqfj4+Lfq9vrLYc/p9jaMsv8MK0u2AAAAQQAA
        ABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuEuuVPnMPp9vb23f//
        /8D///+m////iv///2v///9S6enpRN/f3z/l5eVF8PDwV+np6XXg4OCd7+/vsf///8Bxy+TgTbbW/w82
        XtkAAABSAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHY/H+pvD
        1+b6+vrU////uf///53///99////Xf///z7Jyckvt7e3IM3NzS7i4uJG4uLiadnZ2ZPm5uau////ua3h
        8dBczen/Ej9t8QAAAFsAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAdl8//4uvu6P7+/tD///+2////mf///3n///9X////N5qamiYAAAAMra2tItXV1ULX19dn0tLSk9/f
        36////+26vj8zWHX8f8VRXb9AAAAWgAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAB6Wzv7I2uXq+vr61P///7n///+d////ff///13///8+pqamOZOTkyi1tbU00NDQTM7O
        znPPz8+a3t7etP///7nh8PXSW9Lv/xRFc/AAAABQAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHpDJ8X6xz+n39/fc////wP///6b///+K////a////1K8vLxUsrKyT76+
        vlPFxcVqx8fHidPT06fl5eW5////wJrM39tKv+L/E0Js1AAAAD4AAAASAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisPKPJHB7vb29uT7+/vL////sv///5n///+B////a9jY
        2G6+vr51v7+/fMPDw4zMzMyh2dnZtO7u7r/7+/vLVqzO7DijzP8QOV6rAAAAKwAAAAkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6HwXwhi8X5pMLY7vX19d3+/v7C////rv//
        /5n///+K7Ozsh8zMzJfLy8ud0dHRqNnZ2bTh4eHF9fX1ycjY4uE3qdP9KIGu9wwqRG8AAAAYAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHpbQCh6MxtguiLz1xdXi7PHx
        8dz39/fH////sv///6b8/Pyf5+fnqdzc3Lbf39++4+PjyOrq6tLg5OjhQZnB8y6ezP8VSnOzAAAAKgAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHorDXyKP
        x+4xhrn3ssna7u/v7+Lu7u7W8vLyyvr6+r36+vq67OzsyOPj49jm5ubeztfe6kWTvPMnm8z/IHGg2gsn
        PlAAAAASAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHonDfCKPx+4ffbb/ZZm+9bfL2+3d4ufn5ufn5ebm5ubg4uToyNPc7IisxvMjgLX8IJLI/x56
        qtoROVtVAAAAEgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHorDXx6Mxtggi8T7H322/x9yqv8eaqH/H2mh/x1xqP8dfrX/HY3F/xyL
        wvkacaS2ETtcOQAAAAkAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHpbQCh6Iwnwei8TKHpDJ8R6Wzv4dlc//HZDI+h2H
        v+Ube7GxGVuITgAAAAkAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///hgP///wD///4A///+AP//+AD///AA///gAf//wAP//4AH//8AD//+
        AB/8AAA/+AAAf+AAAP/gAAH/wAAD/4AAB/+AAAP/gAAD/4AAA/+AAAP/gAAD/4AAA/+AAAP/gAAD/4AA
        A/+AAAP/gAAH/8AAB//gAA//8AAf//gAf/8=
</value>
  </data>
</root>